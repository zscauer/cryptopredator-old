logging:
    level:
        root: ${LOGGING_LEVEL_ROOT}
        web: ${LOGGING_LEVEL_WEB}
    pattern:
        console: "%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
        file: "%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}" # "%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg %n"
    file:
        path: /tmp/logs
    logback:
        rollingpolicy:
            file-name-pattern: "${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz"
            max-history: 30

server:
    tomcat:
        accesslog:
            enabled: true
            rotate: false
            suffix: ".log"
            prefix: "access_log"
            directory: "/tmp/logs"
            pattern: "common"

spring:
    main:
        banner-mode: off
    output:
        ansi:
            enabled: "ALWAYS"
    # mvc:
    #     pathmatch:
    #         matching-strategy: ant-path-matcher
#     datasource:
#         url: jdbc:postgresql://spb-dev-1c-02.partner.ru:5432/remember_the_pills
#         driver-class-name: org.postgresql.Driver
#         username: postgres
#         password: pgAdmin
#     jpa:
#         database-platform: org.hibernate.dialect.PostgreSQLDialect

management:
    endpoint:
        health:
            show-details: always
    endpoints:
        web:
            exposure:
                include: 
                    - prometheus
                    - health
    metrics:
        export:
            prometheus:
                enabled: true
        distribution:
            percentiles-histogram:
                "[http.server.requests]": true

applicationconfig:
    testLaunch: ${TEST_LAUNCH}
    useTestnet: ${BINANCE_USE_TESTNET}
    useTestnetStreaming: ${BINANCE_USE_TESTNET_STREAMING}
    apiKey: ${BINANCE_API_KEY}
    secret: ${BINANCE_SECRET_KEY}

strategy:
    # ------------------ monitoring
    monitoring:
        cancelExpiredOrders:
            initialDelay: ${MONITORING_CANCEL_EXPIRED_ORDERS_INITIAL_DELAY}
            fixedDelay: ${MONITORING_CANCEL_EXPIRED_ORDERS_FIXED_DELAY}
    # ------------------ global
    global:
        rocketFactor: ${STRATEGY_GLOBAL_ROCKET_FACTOR}
        initializeUserDataUpdateStream:
            initialDelay: ${STRATEGY_GLOBAL_INITIALIZE_USERDATA_UPDATE_STREAM_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_GLOBAL_INITIALIZE_USERDATA_UPDATE_STREAM_FIXED_DELAY}
        keepAliveUserDataUpdateStream:
            initialDelay: ${STRATEGY_GLOBAL_KEEP_ALIVE_USERDATA_UPDATE_STREAM_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_GLOBAL_KEEP_ALIVE_USERDATA_UPDATE_STREAM_FIXED_DELAY}
    # ------------------ buyFastGrowth 
    buyFastGrowth:
        collectPairsToBuy:
            initialDelay: ${STRATEGY_BUY_FAST_GROWTH_COLLECT_PAIRS_TO_BUY_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_BUY_FAST_GROWTH_COLLECT_PAIRS_TO_BUY_FIXED_DELAY}
        buyCollectedPairs:
            initialDelay: ${STRATEGY_BUY_FAST_GROWTH_BUY_COLLECTED_PAIRS_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_BUY_FAST_GROWTH_BUY_COLLECTED_PAIRS_FIXED_DELAY}
        closeOpenedPositions:
            initialDelay: ${STRATEGY_BUY_FAST_GROWTH_CLOSE_OPENED_POSITIONS_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_BUY_FAST_GROWTH_CLOSE_OPENED_POSITIONS_FIXED_DELAY}
    # ------------------ buyBigVolumeGrowth
    buyBigVolumeGrowth:
        matchTrend: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_MATCH_TREND}
        maximalPairPrice: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_MAXIMAL_PAIR_PRICE}
        minimalAssetBalance: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_MINIMAL_ASSET_BALANCE}
        baseOrderVolume: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_BASE_ORDER_VOLUME}
        volumeGrowthFactor: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_VOLUME_GROWTH_FACTOR}
        priceGrowthFactor: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_PRICE_GROWTH_FACTOR}
        priceDecreaseFactor: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_PRICE_DECREASE_FACTOR}
        
        fillCheapPairs:
            initialDelay: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_FILL_CHEAP_PAIRS_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_FILL_CHEAP_PAIRS_FIXED_DELAY}
        buySelectedGrownAssets:
            initialDelay: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_BUY_SELECTED_GROWN_ASSETS_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_BUY_SELECTED_GROWN_ASSETS_FIXED_DELAY}
        # buyGrownAssets:
        #     initialDelay: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_BUY_GROWN_ASSETS_INITIAL_DELAY}
        #     fixedDelay: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_BUY_GROWN_ASSETS_FIXED_DELAY}
        checkOpenedPositions:
            initialDelay: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_CHECK_OPENED_POSITIONS_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_BUY_BIG_VOLUME_GROWTH_CHECK_OPENED_POSITIONS_FIXED_DELAY}

    # ------------------ buyBigVolumeGrowth
    buyOrderBookTrend:
        testMethod1:
            initialDelay: 30_000
            fixedDelay: 180_000