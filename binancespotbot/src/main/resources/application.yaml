logging:
    level:
        root: ${LOGGING_LEVEL_ROOT}
        web: ${LOGGING_LEVEL_WEB}
    pattern:
        console: "%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
        file: "%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}" # "%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg %n"
    file:
        path: /tmp/logs
    logback:
        rollingpolicy:
            file-name-pattern: "${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz"
            max-history: 30

server:
    tomcat:
        accesslog:
            enabled: true
            rotate: false
            suffix: ".log"
            prefix: "access_log"
            directory: "/tmp/logs"
            pattern: "common"

spring:
    main:
        banner-mode: off
    profiles:
        active: "default"
    output:
        ansi:
            enabled: ALWAYS
    # mvc:
    #     pathmatch:
    #         matching-strategy: ant-path-matcher
#    datasource:
#        url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
#        driver-class-name: org.postgresql.Driver
#        username: ${POSTGRES_USER}
#        password: ${POSTGRES_PASSWORD}
#    jpa:
#        database-platform: org.hibernate.dialecgrat.PostgreSQLDialect

management:
    endpoint:
        health:
            show-details: always
    endpoints:
        web:
            exposure:
                include: 
                    - prometheus
                    - health
    metrics:
        export:
            prometheus:
                enabled: true
        distribution:
            percentiles-histogram:
                "[http.server.requests]": true

applicationconfig:
    testLaunch: ${TEST_LAUNCH}
    useTestnet: ${BINANCE_USE_TESTNET}
    useTestnetStreaming: ${BINANCE_USE_TESTNET_STREAMING}
    apiKey: ${BINANCE_API_KEY}
    secret: ${BINANCE_SECRET_KEY}

databaseconfig:
    redisHost: ${REDIS_HOST}
    redisPort: ${REDIS_PORT}
    redisPassword: ${REDIS_PASSWORD}
    dataKeeperURL: http://${DATAKEEPER_HOST}:${DATAKEEPER_PORT}

strategy:
    # ------------------ monitoring
    monitoring:
        cancelExpiredOrders:
            initialDelay: ${MONITORING_CANCEL_EXPIRED_ORDERS_INITIAL_DELAY}
            fixedDelay: ${MONITORING_CANCEL_EXPIRED_ORDERS_FIXED_DELAY}

    # ------------------ global
    global:
        tradingAsset: ${STRATEGY_GLOBAL_TRADING_ASSET}
        maximalPairPrice: ${STRATEGY_GLOBAL_MAXIMAL_PAIR_PRICE}
        minimalAssetBalance: ${STRATEGY_GLOBAL_MINIMAL_ASSET_BALANCE}
        baseOrderVolume: ${STRATEGY_GLOBAL_BASE_ORDER_VOLUME}
        rocketFactor: ${STRATEGY_GLOBAL_ROCKET_FACTOR}
        candlestickEventsCacheSize: ${STRATEGY_GLOBAL_CANDLESTICK_EVENTS_CACHE_SIZE}
        initializeUserDataUpdateStream:
            initialDelay: ${STRATEGY_GLOBAL_INITIALIZE_USERDATA_UPDATE_STREAM_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_GLOBAL_INITIALIZE_USERDATA_UPDATE_STREAM_FIXED_DELAY}
        keepAliveUserDataUpdateStream:
            initialDelay: ${STRATEGY_GLOBAL_KEEP_ALIVE_USERDATA_UPDATE_STREAM_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_GLOBAL_KEEP_ALIVE_USERDATA_UPDATE_STREAM_FIXED_DELAY}

    # ------------------ volumeCatcher
    volumeCatcher:
        enabled: ${VOLUME_CATCHER_ENABLED}
        matchTrend: ${VOLUME_CATCHER_MATCH_TREND}
        volumeGrowthFactor: ${VOLUME_CATCHER_VOLUME_GROWTH_FACTOR}
        priceGrowthFactor: ${VOLUME_CATCHER_PRICE_GROWTH_FACTOR}
        priceDecreaseFactor: ${VOLUME_CATCHER_PRICE_DECREASE_FACTOR}
        averagingEnabled: ${VOLUME_CATCHER_AVERAGING_ENABLED}
        averagingTriggerFactor: ${VOLUME_CATCHER_AVERAGING_TRIGGER_FACTOR}
        signalIgnoringPeriod: ${VOLUME_CATCHER_SIGNAL_IGNORING_PERIOD}

        startCandlstickEventsCacheUpdating:
            initialDelay: ${VOLUME_CATCHER_START_CANDLESTICKEVENTS_CACHE_UPDATING_INITIAL_DELAY}
            fixedDelay: ${VOLUME_CATCHER_START_CANDLESTICKEVENTS_CACHE_UPDATING_FIXED_DELAY}

    # ------------------ buy24hPriceChange
    buy24hPriceChange:
        enabled: ${STRATEGY_BUY_24H_PRICE_CHANGE_ENABLED}
        percentOfGrowingFor24h: ${STRATEGY_BUY_24H_PRICE_CHANGE_PERCENT_OF_GROWING_FOR_24H}
        defineGrowingPairs:
            initialDelay: ${STRATEGY_BUY_24H_PRICE_CHANGE_DEFINE_GROWING_PAIRS_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_BUY_24H_PRICE_CHANGE_DEFINE_GROWING_PAIRS_FIXED_DELAY}

    # ------------------ bearCub
    bearCub:
        percentOfGrowingFor24h: ${STRATEGY_BEAR_CUB_PERCENT_OF_GROWING_FOR_24H}
        defineGrowingPairs:
            initialDelay: ${STRATEGY_BEAR_CUB_DEFINE_GROWING_PAIRS_INITIAL_DELAY}
            fixedDelay: ${STRATEGY_BEAR_CUB_DEFINE_GROWING_PAIRS_FIXED_DELAY}

    # ------------------ daily
    daily:
        enabled: ${DAILY_ENABLED}
        averagingEnabled: ${DAILY_AVERAGING_ENABLED}
        volumeGrowthFactor: ${DAILY_VOLUME_GROWTH_FACTOR}
        priceGrowthFactor: ${DAILY_PRICE_GROWTH_FACTOR}
        candleTakeProfitFactor: ${DAILY_CANDLE_TAKE_PROFIT_FACTOR}
        pairTakeProfitFactor: ${DAILY_PAIR_TAKE_PROFIT_FACTOR}
        priceDecreaseFactor: ${DAILY_PRICE_DECREASE_FACTOR}
        takeProfitPriceDecreaseFactor: ${DAILY_TAKE_PROFIT_PRICE_DECREASE_FACTOR}
        averagingTriggerFactor: ${DAILY_AVERAGING_TRIGGER_FACTOR}
        rocketCandidatePercentageGrowth: ${DAILY_ROCKET_CANDIDATE_PERCENTAGE_GROWTH}