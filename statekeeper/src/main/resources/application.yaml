logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:-INFO}
    web: ${LOGGING_LEVEL_WEB:-INFO}
  pattern:
    console: "%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    file: "%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
  file:
    path: /tmp/logs
  logback:
    rollingpolicy:
      file-name-pattern: "${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz"
      max-history: 30

server:
  undertow:
    accesslog:
      enabled: true
      dir: "/tmp/logs"
      pattern: "common"
      suffix: ".log"
      prefix: "access_log"
#  tomcat:
#    accesslog:
#      enabled: true
#      rotate: false
#      suffix: ".log"
#      prefix: "access_log"
#      directory: "/tmp/logs"
#      pattern: "common"

spring:
  main:
    lazy-initialization: true
    banner-mode: off
  profiles:
    active: "default"
  output:
    ansi:
      enabled: ALWAYS
  # mvc:
  #     pathmatch:
  #         matching-strategy: ant-path-matcher
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    driver-class-name: org.postgresql.Driver
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
#  jpa:
#    database-platform: org.hibernate.dialect.PostgreSQLDialect
#    url: jdbc:postgresql://host.docker.internal:5432/binance
#    driver-class-name: org.postgresql.Driver
#    username: postgres
#    password: postgres
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect

management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include:
          - prometheus
          - health
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true

redis:
  host: ${REDIS_HOST}
  port: ${REDIS_PORT}
  password: ${REDIS_PASSWORD}

applicationconfig:
  testLaunch: ${TEST_LAUNCH}
  useTestnet: ${BINANCE_USE_TESTNET}
  useTestnetStreaming: ${BINANCE_USE_TESTNET_STREAMING}
  apiKey: ${BINANCE_API_KEY}
  secret: ${BINANCE_SECRET_KEY}

monitoring:
  updateBtcTrend:
    initialDelay: ${STATEKEEPER_UPDATE_BTC_TREND_INITIAL_DELAY}
    fixedDelay: ${STATEKEEPER_UPDATE_BTC_TREND_FIXED_DELAY}
  initializeUserDataUpdateStream:
    initialDelay: ${INITIALIZE_USERDATA_UPDATE_STREAM_INITIAL_DELAY}
    fixedDelay: ${INITIALIZE_USERDATA_UPDATE_STREAM_FIXED_DELAY}
  keepAliveUserDataUpdateStream:
    initialDelay: ${KEEP_ALIVE_USERDATA_UPDATE_STREAM_INITIAL_DELAY}
    fixedDelay: ${KEEP_ALIVE_USERDATA_UPDATE_STREAM_FIXED_DELAY}